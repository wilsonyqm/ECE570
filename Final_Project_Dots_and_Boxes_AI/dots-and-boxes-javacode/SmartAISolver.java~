import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;
public class SmartAISolver extends GameSolver {
    Board newboard;
    int n;
    int BoxArray[][];
    int vedge[][],hedge[][];
    int u,v; //sides 3 variables
    int x,y;//sides 1 variables
    int count; // count for sacrificing
    boolean loop;
    private Edge takeedge(int direction,int x1,int y1) {    //Set hedge if direction=1 and vedge if direction=2.
	if (direction>1) return vedge[x1][y1];
	else return hedge[x1][y1];
    }

    public Edge getNextMove(Board board, int color) {
	//initialization of board attributes
	newboard = board;
	vedge = board.vEdge;
	hedge = board.hEdge;
	n = board.n;
	loop = false;
	count = 0;
	for(int i = 0; i<n;i++){
	    for(int j =0;j<n;j++){
		BoxArray[i][j] = board.getEdgeCount[i][j];
	    }
	}
	//end of initialization
	if (takesafe3s() != null) return takesafe3s();
	if (sides3()) {
	    if (sides01()) {
		if ( takeall3s() != null) return takeall3s();
		else return takeedge(direction,x,y);
	    } else {
		sacrifice(u,v);
	    } 
	} else if (sides01()) return takeedge(direction,x,y);
	else if (singleton()) return takeedge(direction,x,y);
	else if (doubleton()) return takeedge(direction,x,y);
	else return makeanymove();
    }

    private Edge takesafe3s() {     //Take all singleton and doubleton 3's.
	for (int i=0;i<n;i++) {
	    for (int j=0;j<n;j++) {
		if (BoxArray[i][j]==3) {
		    if (vedge[i][j]<1) {
			if (j==0 || BoxArray[i][j-1]!=2) return setvedge(i,j);
		    } else if (hedge[i][j]<1) {
			if (i==0 || BoxArray[i-1][j]!=2) return sethedge(i,j);
		    } else if (vedge[i][j+1]<1) {
			if (j==n-1 || BoxArray[i][j+1]!=2) return setvedge(i,j+1);
		    } else {
			if (i==n-1 || BoxArray[i+1][j]!=2) return sethedge(i+1,j);
		    }
		}
	    }
	}
	return null;
    }
    private Edge sethedge(int i, int j){
	return hedge[i][j];
    }
    private Edge setvedge(int i, int j){
	return vedge[i][j];
    }
    private boolean sides3() {     //Returns true and u,v if there is a BoxArray(u,v)=3.
	for (int i=0;i<n;i++) {
	    for (int j=0;j<n;j++) {
		if (BoxArray[i][j]==3) {
		    u=i;
		    v=j;
		    return true;
		}
	    }
	}
	return false;
    }

    private Edge takeall3s() {
	if (sides3()) return takeBoxArray(u,v);
	else return null;
    }

    private boolean sides01() {     //Returns true and direction,x,y if there is a safe edge(x,y).
	if (Math.random()<.5) direction=1; else direction=2;  //direction=1 if horizontal, direction=2 if vertical
	int i=Math.floor(n*Math.random());
	int j=Math.floor(n*Math.random());
	if (direction==1) {
	    if (tranversehedge(i,j)) return true;
	    else {
		direction=2;
		if (tranversevedge(i,j)) return true;
	    }
	} else {
	    if (tranversevedge(i,j)) return true;
	    else {
		direction=1;
		if (tranversehedge(i,j)) return true;
	    }
	}
	return false;
    }

    private boolean safehedge(i,j) {     //Returns true if (i,j) is a safe hedge
	if (hedge[i][j]<1) {
	    if (i==0) {
		if (BoxArray[i][j]<2) return true
					  } else if (i==n) {
		if (BoxArray[i-1][j]<2) return true
					    }
	    else if (BoxArray[i][j]<2 && BoxArray[i-1][j]<2) return true;
	}
	return false
	    }

    private boolean safevedge(i,j) {
	if (vedge[i][j]<1) {
	    if (j==0) {
		if (BoxArray[i][j]<2) return true
					  } else if (j==n) {
		if (BoxArray[i][j-1]<2) return true
					    }
	    else if (BoxArray[i][j]<2 && BoxArray[i][j-1]<2) return true;
	}
	return false
	    }

    private boolean tranversehedge(i,j) {
	x=i;
	y=j;
	do {
	    if (safehedge(x,y)) return true;
	    else {
		y++;
		if (y==n) {
		    y=0;
		    x++;
		    if (x>n) x=0;
		}
	    }
	} while (x!=i || y!=j);
	return false
	    }
    private boolean tranversevedge(i,j) {
	x=i;
	y=j;
	do {
	    if (safevedge(x,y)) return true;
	    else {
		y++;
		if (y>n) {
		    y=0;
		    x++;
		    if (x==n) x=0;
		}
	    }
	} while (x!=i || y!=j);
	return false
	    }

    private boolean singleton() {     //Returns true and direction,x,y if edge(x,y) gives exactly
	int numb;              //1 square away
	for (int i=0;i<n;i++) {
	    for (int j=0;j<n;j++) {
		if (BoxArray[i][j]==2) {
		    numb=0;
		    if (hedge[i][j]<1) {
			if (i<1 || BoxArray[i-1][j]<2) numb++;
		    }
		    direction=2;
		    if (vedge[i][j]<1) {
			if (j<1 || BoxArray[i][j-1]<2) numb++;
			if (numb>1) {
			    x=i;
			    y=j;
			    return true;
			}
		    }
		    if (vedge[i][j+1]<1) {
			if (j+1==n || BoxArray[i][j+1]<2) numb++;
			if (numb>1) {
			    x=i;
			    y=j+1;
			    return true;
			}
		    }
		    direction=1;
		    if (hedge[i+1][j]<1) {
			if (i+1==n || BoxArray[i+1][j]<2) numb++;
			if (numb>1) {
			    x=i+1;
			    y=j;
			    return true;
			}
		    }
		}
	    }
	}
	return false;
    }

    private boolean doubleton() {     //Returns true and direction,x,y if edge(x,y) gives away 
	direction=2;                  //exactly 2 squares
	for (i=0;i<n;i++) {
	    for (j=0;j<n-1;j++) {
		if (BoxArray[i][j]==2 && BoxArray[i][j+1]==2 && vedge[i][j+1]<1) {
		    if (ldub(i,j) && rdub(i,j+1)) {
			x=i;
			y=j+1;
			return true;
		    }
		}
	    }
	}
	direction=1;
	for (j=0;j<n;j++) {
	    for (i=0;i<n-1;i++) {
		if (BoxArray[i][j]==2 && BoxArray[i+1][j]==2 && hedge[i+1][j]<1) {
		    if (udub(i,j) && ddub(i+1,j)) {
			x=i+1;
			y=j;
			return true;
		    }
		}
	    }
	}
	return false
	    }

    private boolean ldub(i,j) {      //Given BoxArray(i,j)=2 and vedge(i,j+1)=0, returns true
	if (vedge[i][j]<1) {      //if the other free edge leads to a BoxArray<2
	    if (j<1 || BoxArray[i][j-1]<2) return true; 
	} else if (hedge[i][j]<1) {
	    if (i<1 || BoxArray[i-1][j]<2) return true;
	} else if (i==n-1|| BoxArray[i+1][j]<2) {
	    return true
		}
	return false
	    }

    private boolean rdub(i,j) {
	if (vedge[i][j+1]<1) {
	    if (j+1==n || BoxArray[i][j+1]<2) return true;
	} else if (hedge[i][j]<1) {
	    if (i<1 || BoxArray[i-1][j]<2) return true;
	} else if (i+1==n || BoxArray[i+1][j]<2) {
	    return true
		}
	return false
	    }

    private boolean udub(i,j) {
	if (hedge[i][j]<1) {
	    if (i<1 || BoxArray[i-1][j]<2) return true;
	} else if (vedge[i][j]<1) {
	    if (j<1 || BoxArray[i][j-1]<2) return true;
	} else if (j==n-1 || BoxArray[i][j+1]<2) {
	    return true
		}
	return false
	    }

    private boolean ddub(i,j) {
	if (hedge[i+1][j]<1) {
	    if (i==n-1 || BoxArray[i+1][j]<2) return true;
	} else if (vedge[i][j]<1) {
	    if (j<1 || BoxArray[i][j-1]<2) return true;
	} else if (j==n-1 || BoxArray[i][j+1]<2) {
	    return true
		}
	return false
	    }

    private Edge sacrifice(i,j) {     //sacrifices two squares if there are still 3's

	incount(0,i,j);
	if (side3not(i,j)) return takeBoxArray(u,v);
	else{
	    if (count+board.getRedScore+board.getBlueScore==n*n && takeall3s() != null) {
		return takeall3s();
	    } else {
		if (loop) {
		    count=count-2;
		}
		outcount(0,i,j);
		i=n;
		j=n
		    }
	}
    }

    private void incount(k,i,j) {  //enter with BoxArray[i][j]=3 and k=0
	count++;               //returns count = number in chain starting at i,j
	if (k!=1 && vedge[i][j]<1) {     //k=1,2,3,4 means skip left,up,right,down.
	    if (j>0) {
		if (BoxArray[i][j-1]>2) {
		    count++;
		    loop=true;
		} else if (BoxArray[i][j-1]>1) incount(3,i,j-1);
	    }
	} else if (k!=2 && hedge[i][j]<1) {
	    if (i>0) {
		if (BoxArray[i-1][j]>2) {
		    count++;
		    loop=true
			} else if (BoxArray[i-1][j]>1) incount(4,i-1,j);
	    }
	} else if (k!=3 && vedge[i][j+1]<1) {
	    if (j<n-1) {
		if (BoxArray[i][j+1]>2) {
		    count++;
		    loop=true
			} else if (BoxArray[i][j+1]>1) incount(1,i,j+1);
	    }
	} else if (k!=4 && hedge[i+1][j]<1) {
	    if (i<n-1) {
		if (BoxArray[i+1][j]>2) {
		    count++;
		    loop=true
			} else if (BoxArray[i+1][j]>1) incount(2,i+1,j);
	    }
	}
    }


    private boolean sides3not(x,y) {
	for (int i=0;i<n;i++) {
	    for (int j=0;j<n;j++) {
		if (BoxArray[i][j]==3) {
		    if (i!=x || j!=y) {
			u=i;
			v=j;
			return true;
		    }
		}
	    }
	}
	return false
	    }

    private Edge takeBoxArray(i,j) {
	if (hedge[i][j]<1) return sethedge(i,j);
	else if (vedge[i][j]<1) return setvedge(i,j);
	else if (hedge[i+1][j]<1) return sethedge(i+1,j);
	else return setvedge(i,j+1);
    }

    private void outcount(k,i,j) {     //Takes all but count-2 squares and exits
	if (count>0) {
	    if (k!=1 && vedge[i][j]<1) {
		if (count!=2) setvedge(i,j);
		count--;
		outcount(3,i,j-1)
		    } else if (k!=2 && hedge[i][j]<1) {
		if (count!=2) sethedge(i,j);
		count--;
		outcount(4,i-1,j)
		    } else if (k!=3 && vedge[i][j+1]<1) {
		if (count!=2) setvedge(i,j+1);
		count--;
		outcount(1,i,j+1)
		    } else if (k!=4 && hedge[i+1][j]<1) {
		if (count!=2) sethedge(i+1,j);
		count--;
		outcount(2,i+1,j)
		    }
	}
    }

    private Edge makeanymove() {
	x=-1;
	for (i=0;i<=n;i++) {
	    for (j=0;j<n;j++) {
		if (hedge[i][j]<1) {
		    x=i;
		    y=j;
		    i=n+1;
		    j=n
			}
	    }
	}
	if (x<0) {
	    for (i=0;i<n;i++) {
		for (j=0;j<=n;j++) {
		    if (vedge[i][j]<1) {
			x=i;
			y=j;
			i=n;
			j=n+1;
		    }
		}
	    }
	    setvedge(x,y);
	} else {
	    sethedge(x,y);
	}
	if (player==0) makemove();
    }


}
